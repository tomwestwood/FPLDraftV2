{"ast":null,"code":"import _inherits from \"C:/Users/tom.westwood/Documents/Personal/Work/Tom/FPL/FPLDraftV2/FPLDraftV2/ClientApp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/tom.westwood/Documents/Personal/Work/Tom/FPL/FPLDraftV2/FPLDraftV2/ClientApp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/tom.westwood/Documents/Personal/Work/Tom/FPL/FPLDraftV2/FPLDraftV2/ClientApp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/tom.westwood/Documents/Personal/Work/Tom/FPL/FPLDraftV2/FPLDraftV2/ClientApp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i4 from '@angular/cdk/portal';\nimport { PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Optional, Inject, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) {}\n\nvar defaultParams = {\n  params: {\n    enterAnimationDuration: '150ms',\n    exitAnimationDuration: '75ms'\n  }\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\n\nvar matDialogAnimations = {\n  /** Animation that is applied on the dialog container by default. */\n  dialogContainer: /*#__PURE__*/trigger('dialogContainer', [\n  /*#__PURE__*/\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', /*#__PURE__*/style({\n    opacity: 0,\n    transform: 'scale(0.7)'\n  })), /*#__PURE__*/state('enter', /*#__PURE__*/style({\n    transform: 'none'\n  })), /*#__PURE__*/transition('* => enter', /*#__PURE__*/group([/*#__PURE__*/animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', /*#__PURE__*/style({\n    transform: 'none',\n    opacity: 1\n  })), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })]), defaultParams), /*#__PURE__*/transition('* => void, * => exit', /*#__PURE__*/group([/*#__PURE__*/animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', /*#__PURE__*/style({\n    opacity: 0\n  })), /*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })]), defaultParams)])\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\n\nvar MatDialogConfig = /*#__PURE__*/_createClass(function MatDialogConfig() {\n  _classCallCheck(this, MatDialogConfig);\n\n  /** The ARIA role of the dialog element. */\n  this.role = 'dialog';\n  /** Custom class for the overlay pane. */\n\n  this.panelClass = '';\n  /** Whether the dialog has a backdrop. */\n\n  this.hasBackdrop = true;\n  /** Custom class for the backdrop. */\n\n  this.backdropClass = '';\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n\n  this.disableClose = false;\n  /** Width of the dialog. */\n\n  this.width = '';\n  /** Height of the dialog. */\n\n  this.height = '';\n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n\n  this.maxWidth = '80vw';\n  /** Data being injected into the child component. */\n\n  this.data = null;\n  /** ID of the element that describes the dialog. */\n\n  this.ariaDescribedBy = null;\n  /** ID of the element that labels the dialog. */\n\n  this.ariaLabelledBy = null;\n  /** Aria label to assign to the dialog element. */\n\n  this.ariaLabel = null;\n  /**\n   * Where the dialog should focus on open.\n   * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n   * AutoFocusTarget instead.\n   */\n\n  this.autoFocus = 'first-tabbable';\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n\n  this.restoreFocus = true;\n  /** Whether to wait for the opening animation to finish before trapping focus. */\n\n  this.delayFocusTrap = true;\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n\n  this.closeOnNavigation = true;\n  /** Duration of the enter animation. Has to be a valid CSS value (e.g. 100ms). */\n\n  this.enterAnimationDuration = defaultParams.params.enterAnimationDuration;\n  /** Duration of the exit animation. Has to be a valid CSS value (e.g. 50ms). */\n\n  this.exitAnimationDuration = defaultParams.params.exitAnimationDuration; // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n});\n/**\n * Base class for the `MatDialogContainer`. The base class does not implement\n * animations as these are left to implementers of the dialog container.\n */\n// tslint:disable-next-line:validate-decorators\n\n\nvar _MatDialogContainerBase = /*#__PURE__*/(function () {\n  var _MatDialogContainerBase = /*#__PURE__*/function (_CdkDialogContainer) {\n    _inherits(_MatDialogContainerBase, _CdkDialogContainer);\n\n    var _super = _createSuper(_MatDialogContainerBase);\n\n    function _MatDialogContainerBase(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor) {\n      var _this;\n\n      _classCallCheck(this, _MatDialogContainerBase);\n\n      _this = _super.call(this, elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n      /** Emits when an animation state changes. */\n\n      _this._animationStateChanged = new EventEmitter();\n      return _this;\n    }\n\n    _createClass(_MatDialogContainerBase, [{\n      key: \"_captureInitialFocus\",\n      value: function _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n          this._trapFocus();\n        }\n      }\n      /**\n       * Callback for when the open dialog animation has finished. Intended to\n       * be called by sub-classes that use different animation implementations.\n       */\n\n    }, {\n      key: \"_openAnimationDone\",\n      value: function _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n          this._trapFocus();\n        }\n\n        this._animationStateChanged.next({\n          state: 'opened',\n          totalTime: totalTime\n        });\n      }\n    }]);\n\n    return _MatDialogContainerBase;\n  }(CdkDialogContainer);\n\n  _MatDialogContainerBase.ɵfac = function _MatDialogContainerBase_Factory(t) {\n    return new (t || _MatDialogContainerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n\n  _MatDialogContainerBase.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _MatDialogContainerBase,\n    selectors: [[\"ng-component\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function _MatDialogContainerBase_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return _MatDialogContainerBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n\n\nvar MatDialogContainer = /*#__PURE__*/(function () {\n  var MatDialogContainer = /*#__PURE__*/function (_MatDialogContainerBa) {\n    _inherits(MatDialogContainer, _MatDialogContainerBa);\n\n    var _super2 = _createSuper(MatDialogContainer);\n\n    function MatDialogContainer(elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, _changeDetectorRef, focusMonitor) {\n      var _this2;\n\n      _classCallCheck(this, MatDialogContainer);\n\n      _this2 = _super2.call(this, elementRef, focusTrapFactory, document, dialogConfig, checker, ngZone, overlayRef, focusMonitor);\n      _this2._changeDetectorRef = _changeDetectorRef;\n      /** State of the dialog animation. */\n\n      _this2._state = 'enter';\n      return _this2;\n    }\n    /** Callback, invoked whenever an animation on the host completes. */\n\n\n    _createClass(MatDialogContainer, [{\n      key: \"_onAnimationDone\",\n      value: function _onAnimationDone(_ref2) {\n        var toState = _ref2.toState,\n            totalTime = _ref2.totalTime;\n\n        if (toState === 'enter') {\n          this._openAnimationDone(totalTime);\n        } else if (toState === 'exit') {\n          this._animationStateChanged.next({\n            state: 'closed',\n            totalTime: totalTime\n          });\n        }\n      }\n      /** Callback, invoked when an animation on the host starts. */\n\n    }, {\n      key: \"_onAnimationStart\",\n      value: function _onAnimationStart(_ref3) {\n        var toState = _ref3.toState,\n            totalTime = _ref3.totalTime;\n\n        if (toState === 'enter') {\n          this._animationStateChanged.next({\n            state: 'opening',\n            totalTime: totalTime\n          });\n        } else if (toState === 'exit' || toState === 'void') {\n          this._animationStateChanged.next({\n            state: 'closing',\n            totalTime: totalTime\n          });\n        }\n      }\n      /** Starts the dialog exit animation. */\n\n    }, {\n      key: \"_startExitAnimation\",\n      value: function _startExitAnimation() {\n        this._state = 'exit'; // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n\n        this._changeDetectorRef.markForCheck();\n      }\n    }, {\n      key: \"_getAnimationState\",\n      value: function _getAnimationState() {\n        return {\n          value: this._state,\n          params: {\n            'enterAnimationDuration': this._config.enterAnimationDuration || defaultParams.params.enterAnimationDuration,\n            'exitAnimationDuration': this._config.exitAnimationDuration || defaultParams.params.exitAnimationDuration\n          }\n        };\n      }\n    }]);\n\n    return MatDialogContainer;\n  }(_MatDialogContainerBase);\n\n  MatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) {\n    return new (t || MatDialogContainer)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusTrapFactory), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(MatDialogConfig), i0.ɵɵdirectiveInject(i1.InteractivityChecker), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1$1.OverlayRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n  };\n\n  MatDialogContainer.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MatDialogContainer,\n    selectors: [[\"mat-dialog-container\"]],\n    hostAttrs: [\"tabindex\", \"-1\", 1, \"mat-dialog-container\"],\n    hostVars: 7,\n    hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵsyntheticHostListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) {\n          return ctx._onAnimationStart($event);\n        })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) {\n          return ctx._onAnimationDone($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx._config.id);\n        i0.ɵɵattribute(\"aria-modal\", ctx._config.ariaModal)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        i0.ɵɵsyntheticHostProperty(\"@dialogContainer\", ctx._getAnimationState());\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"cdkPortalOutlet\", \"\"]],\n    template: function MatDialogContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    dependencies: [i4.CdkPortalOutlet],\n    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;box-sizing:content-box;margin-bottom:-24px}.mat-dialog-actions.mat-dialog-actions-align-center,.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions.mat-dialog-actions-align-end,.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matDialogAnimations.dialogContainer]\n    }\n  });\n  return MatDialogContainer;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\n\n\nvar MatDialogRef = /*#__PURE__*/function () {\n  function MatDialogRef(_ref, config, _containerInstance) {\n    var _this3 = this;\n\n    _classCallCheck(this, MatDialogRef);\n\n    this._ref = _ref;\n    this._containerInstance = _containerInstance;\n    /** Subject for notifying the user that the dialog has finished opening. */\n\n    this._afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n\n    this._beforeClosed = new Subject();\n    /** Current state of the dialog. */\n\n    this._state = 0\n    /* MatDialogState.OPEN */\n    ;\n    this.disableClose = config.disableClose;\n    this.id = _ref.id; // Emit when opening animation completes\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'opened';\n    }), take(1)).subscribe(function () {\n      _this3._afterOpened.next();\n\n      _this3._afterOpened.complete();\n    }); // Dispose overlay when closing animation is complete\n\n\n    _containerInstance._animationStateChanged.pipe(filter(function (event) {\n      return event.state === 'closed';\n    }), take(1)).subscribe(function () {\n      clearTimeout(_this3._closeFallbackTimeout);\n\n      _this3._finishDialogClose();\n    });\n\n    _ref.overlayRef.detachments().subscribe(function () {\n      _this3._beforeClosed.next(_this3._result);\n\n      _this3._beforeClosed.complete();\n\n      _this3._finishDialogClose();\n    });\n\n    merge(this.backdropClick(), this.keydownEvents().pipe(filter(function (event) {\n      return event.keyCode === ESCAPE && !_this3.disableClose && !hasModifierKey(event);\n    }))).subscribe(function (event) {\n      if (!_this3.disableClose) {\n        event.preventDefault();\n\n        _closeDialogVia(_this3, event.type === 'keydown' ? 'keyboard' : 'mouse');\n      }\n    });\n  }\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n\n\n  _createClass(MatDialogRef, [{\n    key: \"close\",\n    value: function close(dialogResult) {\n      var _this4 = this;\n\n      this._result = dialogResult; // Transition the backdrop in parallel to the dialog.\n\n      this._containerInstance._animationStateChanged.pipe(filter(function (event) {\n        return event.state === 'closing';\n      }), take(1)).subscribe(function (event) {\n        _this4._beforeClosed.next(dialogResult);\n\n        _this4._beforeClosed.complete();\n\n        _this4._ref.overlayRef.detachBackdrop(); // The logic that disposes of the overlay depends on the exit animation completing, however\n        // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n        // timeout which will clean everything up if the animation hasn't fired within the specified\n        // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n        // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n\n\n        _this4._closeFallbackTimeout = setTimeout(function () {\n          return _this4._finishDialogClose();\n        }, event.totalTime + 100);\n      });\n\n      this._state = 1\n      /* MatDialogState.CLOSING */\n      ;\n\n      this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n\n  }, {\n    key: \"afterOpened\",\n    value: function afterOpened() {\n      return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n\n  }, {\n    key: \"afterClosed\",\n    value: function afterClosed() {\n      return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n\n  }, {\n    key: \"beforeClosed\",\n    value: function beforeClosed() {\n      return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n\n  }, {\n    key: \"backdropClick\",\n    value: function backdropClick() {\n      return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n\n  }, {\n    key: \"keydownEvents\",\n    value: function keydownEvents() {\n      return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition(position) {\n      var strategy = this._ref.config.positionStrategy;\n\n      if (position && (position.left || position.right)) {\n        position.left ? strategy.left(position.left) : strategy.right(position.right);\n      } else {\n        strategy.centerHorizontally();\n      }\n\n      if (position && (position.top || position.bottom)) {\n        position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n      } else {\n        strategy.centerVertically();\n      }\n\n      this._ref.updatePosition();\n\n      return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n\n  }, {\n    key: \"updateSize\",\n    value: function updateSize() {\n      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      this._ref.updateSize(width, height);\n\n      return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n\n  }, {\n    key: \"addPanelClass\",\n    value: function addPanelClass(classes) {\n      this._ref.addPanelClass(classes);\n\n      return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n\n  }, {\n    key: \"removePanelClass\",\n    value: function removePanelClass(classes) {\n      this._ref.removePanelClass(classes);\n\n      return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n\n  }, {\n    key: \"_finishDialogClose\",\n    value: function _finishDialogClose() {\n      this._state = 2\n      /* MatDialogState.CLOSED */\n      ;\n\n      this._ref.close(this._result, {\n        focusOrigin: this._closeInteractionType\n      });\n\n      this.componentInstance = null;\n    }\n  }]);\n\n  return MatDialogRef;\n}();\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\n\n\nfunction _closeDialogVia(ref, interactionType, result) {\n  ref._closeInteractionType = interactionType;\n  return ref.close(result);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\n\n\nvar MAT_DIALOG_DATA = /*#__PURE__*/new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\n\nvar MAT_DIALOG_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\n\nvar MAT_DIALOG_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return function () {\n    return overlay.scrollStrategies.block();\n  };\n}\n/** @docs-private */\n\n\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY\n}; // Counter for unique dialog ids.\n\nvar uniqueId = 0;\n/**\n * Base class for dialog services. The base dialog service allows\n * for arbitrary dialog refs and dialog container components.\n */\n\nvar _MatDialogBase = /*#__PURE__*/(function () {\n  var _MatDialogBase = /*#__PURE__*/function () {\n    function _MatDialogBase(_overlay, injector, _defaultOptions, _parentDialog,\n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, scrollStrategy, _dialogRefConstructor, _dialogContainerType, _dialogDataToken,\n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n      var _this5 = this;\n\n      _classCallCheck(this, _MatDialogBase);\n\n      this._overlay = _overlay;\n      this._defaultOptions = _defaultOptions;\n      this._parentDialog = _parentDialog;\n      this._dialogRefConstructor = _dialogRefConstructor;\n      this._dialogContainerType = _dialogContainerType;\n      this._dialogDataToken = _dialogDataToken;\n      this._openDialogsAtThisLevel = [];\n      this._afterAllClosedAtThisLevel = new Subject();\n      this._afterOpenedAtThisLevel = new Subject();\n      this._idPrefix = 'mat-dialog-';\n      /**\n       * Stream that emits when all open dialog have finished closing.\n       * Will emit on subscribe if there are no open dialogs to begin with.\n       */\n\n      this.afterAllClosed = defer(function () {\n        return _this5.openDialogs.length ? _this5._getAfterAllClosed() : _this5._getAfterAllClosed().pipe(startWith(undefined));\n      });\n      this._scrollStrategy = scrollStrategy;\n      this._dialog = injector.get(Dialog);\n    }\n    /** Keeps track of the currently-open dialogs. */\n\n\n    _createClass(_MatDialogBase, [{\n      key: \"openDialogs\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n      }\n      /** Stream that emits when a dialog has been opened. */\n\n    }, {\n      key: \"afterOpened\",\n      get: function get() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n      }\n    }, {\n      key: \"_getAfterAllClosed\",\n      value: function _getAfterAllClosed() {\n        var parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n      }\n    }, {\n      key: \"open\",\n      value: function open(componentOrTemplateRef, config) {\n        var _this6 = this;\n\n        var dialogRef;\n        config = Object.assign(Object.assign({}, this._defaultOptions || new MatDialogConfig()), config);\n        config.id = config.id || \"\".concat(this._idPrefix).concat(uniqueId++);\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n\n        var cdkRef = this._dialog.open(componentOrTemplateRef, Object.assign(Object.assign({}, config), {\n          positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n          // Disable closing since we need to sync it up to the animation ourselves.\n          disableClose: true,\n          // Disable closing on destroy, because this service cleans up its open dialogs as well.\n          // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n          // the dialogs immediately whereas we want it to wait for the animations to finish.\n          closeOnDestroy: false,\n          container: {\n            type: this._dialogContainerType,\n            providers: function providers() {\n              return [// Provide our config as the CDK config as well since it has the same interface as the\n              // CDK one, but it contains the actual values passed in by the user for things like\n              // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n              {\n                provide: MatDialogConfig,\n                useValue: config\n              }, {\n                provide: DialogConfig,\n                useValue: config\n              }];\n            }\n          },\n          templateContext: function templateContext() {\n            return {\n              dialogRef: dialogRef\n            };\n          },\n          providers: function providers(ref, cdkConfig, dialogContainer) {\n            dialogRef = new _this6._dialogRefConstructor(ref, config, dialogContainer);\n            dialogRef.updatePosition(config === null || config === void 0 ? void 0 : config.position);\n            return [{\n              provide: _this6._dialogContainerType,\n              useValue: dialogContainer\n            }, {\n              provide: _this6._dialogDataToken,\n              useValue: cdkConfig.data\n            }, {\n              provide: _this6._dialogRefConstructor,\n              useValue: dialogRef\n            }];\n          }\n        })); // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n\n\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(function () {\n          var index = _this6.openDialogs.indexOf(dialogRef);\n\n          if (index > -1) {\n            _this6.openDialogs.splice(index, 1);\n\n            if (!_this6.openDialogs.length) {\n              _this6._getAfterAllClosed().next();\n            }\n          }\n        });\n        return dialogRef;\n      }\n      /**\n       * Closes all of the currently-open dialogs.\n       */\n\n    }, {\n      key: \"closeAll\",\n      value: function closeAll() {\n        this._closeDialogs(this.openDialogs);\n      }\n      /**\n       * Finds an open dialog by its id.\n       * @param id ID to use when looking up the dialog.\n       */\n\n    }, {\n      key: \"getDialogById\",\n      value: function getDialogById(id) {\n        return this.openDialogs.find(function (dialog) {\n          return dialog.id === id;\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n\n        this._afterAllClosedAtThisLevel.complete();\n\n        this._afterOpenedAtThisLevel.complete();\n      }\n    }, {\n      key: \"_closeDialogs\",\n      value: function _closeDialogs(dialogs) {\n        var i = dialogs.length;\n\n        while (i--) {\n          dialogs[i].close();\n        }\n      }\n    }]);\n\n    return _MatDialogBase;\n  }();\n\n  _MatDialogBase.ɵfac = function _MatDialogBase_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  _MatDialogBase.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _MatDialogBase,\n    factory: _MatDialogBase.ɵfac\n  });\n  return _MatDialogBase;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Service to open Material Design modal dialogs.\n */\n\n\nvar MatDialog = /*#__PURE__*/(function () {\n  var MatDialog = /*#__PURE__*/function (_MatDialogBase2) {\n    _inherits(MatDialog, _MatDialogBase2);\n\n    var _super3 = _createSuper(MatDialog);\n\n    function MatDialog(overlay, injector,\n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, defaultOptions, scrollStrategy, parentDialog,\n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    overlayContainer,\n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    animationMode) {\n      _classCallCheck(this, MatDialog);\n\n      return _super3.call(this, overlay, injector, defaultOptions, parentDialog, overlayContainer, scrollStrategy, MatDialogRef, MatDialogContainer, MAT_DIALOG_DATA, animationMode);\n    }\n\n    return _createClass(MatDialog);\n  }(_MatDialogBase);\n\n  MatDialog.ɵfac = function MatDialog_Factory(t) {\n    return new (t || MatDialog)(i0.ɵɵinject(i1$1.Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.Location, 8), i0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), i0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), i0.ɵɵinject(MatDialog, 12), i0.ɵɵinject(i1$1.OverlayContainer), i0.ɵɵinject(ANIMATION_MODULE_TYPE, 8));\n  };\n\n  MatDialog.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MatDialog,\n    factory: MatDialog.ɵfac\n  });\n  return MatDialog;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Counter used to generate unique IDs for dialog elements. */\n\n\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\n\nvar MatDialogClose = /*#__PURE__*/(function () {\n  var MatDialogClose = /*#__PURE__*/function () {\n    function MatDialogClose(\n    /**\n     * Reference to the containing dialog.\n     * @deprecated `dialogRef` property to become private.\n     * @breaking-change 13.0.0\n     */\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogClose);\n\n      this.dialogRef = dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Default to \"button\" to prevents accidental form submits. */\n\n      this.type = 'button';\n    }\n\n    _createClass(MatDialogClose, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.dialogRef) {\n          // When this directive is included in a dialog via TemplateRef (rather than being\n          // in a Component), the DialogRef isn't available via injection because embedded\n          // views cannot be given a custom injector. Instead, we look up the DialogRef by\n          // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n          // be resolved at constructor time.\n          this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n\n        if (proxiedChange) {\n          this.dialogResult = proxiedChange.currentValue;\n        }\n      }\n    }, {\n      key: \"_onButtonClick\",\n      value: function _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n      }\n    }]);\n\n    return MatDialogClose;\n  }();\n\n  MatDialogClose.ɵfac = function MatDialogClose_Factory(t) {\n    return new (t || MatDialogClose)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogClose.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogClose,\n    selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MatDialogClose_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler($event) {\n          return ctx._onButtonClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n      }\n    },\n    inputs: {\n      ariaLabel: [\"aria-label\", \"ariaLabel\"],\n      type: \"type\",\n      dialogResult: [\"mat-dialog-close\", \"dialogResult\"],\n      _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"]\n    },\n    exportAs: [\"matDialogClose\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return MatDialogClose;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n\n\nvar MatDialogTitle = /*#__PURE__*/(function () {\n  var MatDialogTitle = /*#__PURE__*/function () {\n    function MatDialogTitle( // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n      _classCallCheck(this, MatDialogTitle);\n\n      this._dialogRef = _dialogRef;\n      this._elementRef = _elementRef;\n      this._dialog = _dialog;\n      /** Unique id for the dialog title. If none is supplied, it will be auto-generated. */\n\n      this.id = \"mat-dialog-title-\".concat(dialogElementUid++);\n    }\n\n    _createClass(MatDialogTitle, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this7 = this;\n\n        if (!this._dialogRef) {\n          this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n\n        if (this._dialogRef) {\n          Promise.resolve().then(function () {\n            var container = _this7._dialogRef._containerInstance;\n\n            if (container && !container._ariaLabelledBy) {\n              container._ariaLabelledBy = _this7.id;\n            }\n          });\n        }\n      }\n    }]);\n\n    return MatDialogTitle;\n  }();\n\n  MatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) {\n    return new (t || MatDialogTitle)(i0.ɵɵdirectiveInject(MatDialogRef, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MatDialog));\n  };\n\n  MatDialogTitle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogTitle,\n    selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-title\"],\n    hostVars: 1,\n    hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    exportAs: [\"matDialogTitle\"]\n  });\n  return MatDialogTitle;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Scrollable content container of a dialog.\n */\n\n\nvar MatDialogContent = /*#__PURE__*/(function () {\n  var MatDialogContent = /*#__PURE__*/_createClass(function MatDialogContent() {\n    _classCallCheck(this, MatDialogContent);\n  });\n\n  MatDialogContent.ɵfac = function MatDialogContent_Factory(t) {\n    return new (t || MatDialogContent)();\n  };\n\n  MatDialogContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogContent,\n    selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-content\"]\n  });\n  return MatDialogContent;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n\n\nvar MatDialogActions = /*#__PURE__*/(function () {\n  var MatDialogActions = /*#__PURE__*/_createClass(function MatDialogActions() {\n    _classCallCheck(this, MatDialogActions);\n\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    this.align = 'start';\n  });\n\n  MatDialogActions.ɵfac = function MatDialogActions_Factory(t) {\n    return new (t || MatDialogActions)();\n  };\n\n  MatDialogActions.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatDialogActions,\n    selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]],\n    hostAttrs: [1, \"mat-dialog-actions\"],\n    hostVars: 4,\n    hostBindings: function MatDialogActions_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"mat-dialog-actions-align-center\", ctx.align === \"center\")(\"mat-dialog-actions-align-end\", ctx.align === \"end\");\n      }\n    },\n    inputs: {\n      align: \"align\"\n    }\n  });\n  return MatDialogActions;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // TODO(crisbeto): this utility shouldn't be necessary anymore, because the dialog ref is provided\n// both to component and template dialogs through DI. We need to keep it around, because there are\n// some internal wrappers around `MatDialog` that happened to work by accident, because we had this\n// fallback logic in place.\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\n\n\nfunction getClosestDialog(element, openDialogs) {\n  var parent = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(function (dialog) {\n    return dialog.id === parent.id;\n  }) : null;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar MatDialogModule = /*#__PURE__*/(function () {\n  var MatDialogModule = /*#__PURE__*/_createClass(function MatDialogModule() {\n    _classCallCheck(this, MatDialogModule);\n  });\n\n  MatDialogModule.ɵfac = function MatDialogModule_Factory(t) {\n    return new (t || MatDialogModule)();\n  };\n\n  MatDialogModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatDialogModule\n  });\n  MatDialogModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER],\n    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule]\n  });\n  return MatDialogModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, _MatDialogBase, _MatDialogContainerBase, _closeDialogVia, matDialogAnimations }; //# sourceMappingURL=dialog.mjs.map","map":null,"metadata":{},"sourceType":"module"}