{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Draft, DraftManagerPick, DraftFunctions, DraftManager, DraftStatuses, RoundPicks, SealedBid } from '../../models/draft';\nimport { FplService } from '../../services/fpl.service';\nimport { SignalRService } from '../../services/signalR.service';\nimport { DraftService } from '../../services/draft.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../services/fpl.service\";\nimport * as i3 from \"../../services/draft.service\";\nimport * as i4 from \"../../services/signalR.service\";\nexport let DraftControllerService = /*#__PURE__*/(() => {\n  class DraftControllerService {\n    constructor(http, fplService, draftService, signalRService) {\n      this.http = http;\n      this.fplService = fplService;\n      this.draftService = draftService;\n      this.signalRService = signalRService;\n      this.draft = new BehaviorSubject(undefined);\n      this.fplBase = new BehaviorSubject(undefined);\n      this.pick = new BehaviorSubject(undefined);\n      this.status = new BehaviorSubject(undefined);\n      this.startDraftTimer = new EventEmitter();\n      this.stopDraftTimer = new EventEmitter();\n      this.startSealedBidsTimer = new EventEmitter();\n      this.stopSealedBidsTimer = new EventEmitter();\n      this.subscribeToEvents();\n    }\n\n    getDraft(draftId) {\n      this.fplService.getFplBase().subscribe(fplBase => {\n        this.fplBase.next(fplBase);\n        this.draftService.getDraftById(draftId).subscribe(draft => {\n          draft.draft_manager = draft.draft_managers.find(dm => dm.id == draft.draft_manager_id);\n          draft.draft_manager_picks.forEach(dmp => dmp.player = fplBase.elements.find(e => e.id == dmp.player_id));\n          draft.draft_manager.draft_manager_picks = DraftFunctions.getDraftPicksForManager(draft.draft_manager, draft, this.fplBase.value);\n          draft.draft_manager.draft_squad = DraftFunctions.getDraftSquadForManager(draft.draft_manager);\n          draft.draft_managers.forEach(dm => dm.draft_manager_picks = draft.draft_manager_picks.filter(dmp => dmp.draft_manager_id == dm.id));\n          this.draft.next(draft);\n        });\n      });\n    }\n\n    saveDraft(draft) {\n      return this.draftService.updateDraft(draft);\n    }\n\n    savePick(pick) {\n      return this.draftService.savePick(pick);\n    }\n\n    updatePick(pick) {\n      return this.draftService.updatePick(pick);\n    }\n\n    setDraftStatus(status) {\n      this.draft.value.status_id = status;\n      this.status.next(status);\n      this.saveDraft(this.draft.value).subscribe(draft => {\n        this.updateDraftStatusNotification(status);\n      });\n    }\n\n    setNextDraftManager() {\n      let draft_managers = this.draft.value.draft_managers;\n      draft_managers.forEach(dm => {\n        dm.draft_manager_picks = this.draft.value.draft_manager_picks.filter(dmp => dmp.draft_manager_id == dm.id).map(dmp => DraftFunctions.getBasicDraftManagerPickObject(dmp));\n      });\n      let current_seed = this.draft.value.draft_manager.draft_seed;\n      let draft_round = this.draft.value.draft_round;\n      let draft_direction = this.draft.value.direction;\n      let managers_with_pick_left_this_round = this.getRemainingDraftManagersInRound(draft_managers, draft_round, current_seed, draft_direction);\n\n      if (this.draft.value.status_id == DraftStatuses.Timeout && managers_with_pick_left_this_round.some(dm => dm.id == this.draft.value.draft_manager_id)) {\n        managers_with_pick_left_this_round.splice(managers_with_pick_left_this_round.findIndex(dm => dm.id == this.draft.value.draft_manager_id), 1);\n      }\n\n      if (managers_with_pick_left_this_round.length > 0) {\n        let next_manager = draft_direction ? managers_with_pick_left_this_round.reduce((p, c) => p.draft_seed > c.draft_seed ? p : c) : managers_with_pick_left_this_round.reduce((p, c) => p.draft_seed < c.draft_seed ? p : c);\n        this.draft.value.draft_manager = next_manager;\n        this.draft.value.draft_manager_id = next_manager.id;\n      } else {\n        this.draft.value.direction = !this.draft.value.direction;\n        this.draft.value.draft_round = this.draft.value.draft_round + 1;\n        let next_manager = draft_direction ? draft_managers.reduce((p, c) => p.draft_seed < c.draft_seed ? p : c) : draft_managers.reduce((p, c) => p.draft_seed > c.draft_seed ? p : c);\n        this.draft.value.draft_manager = next_manager;\n        this.draft.value.draft_manager_id = next_manager.id;\n      }\n\n      this.draft.value.draft_manager.draft_squad = DraftFunctions.getDraftSquadForManager(this.draft.value.draft_manager);\n      this.saveDraft(this.draft.value).subscribe(draft => {\n        this.updateDraftNotification(this.draft.value);\n      });\n    }\n\n    getCurrentPick() {\n      var _a;\n\n      let current_pick = this.draft.value.draft_manager_picks.filter(dmp => dmp.nominator_id == this.draft.value.draft_manager_id && dmp.pick_order == this.draft.value.draft_round).reduce((p, c) => p.id > c.id ? p : c);\n\n      if (current_pick) {\n        current_pick.player = this.fplBase.value.elements.find(p => p.id == current_pick.player_id);\n\n        if (((_a = current_pick.sealed_bids) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n          this.getMaxBid(current_pick);\n        }\n      }\n\n      return current_pick;\n    }\n\n    getNext12Picks() {\n      let roundPicks = [];\n      let draft_managers = this.draft.value.draft_managers;\n      draft_managers.forEach(dm => {\n        dm.draft_manager_picks = this.draft.value.draft_manager_picks.filter(dmp => dmp.draft_manager_id == dm.id).map(dmp => DraftFunctions.getBasicDraftManagerPickObject(dmp));\n      });\n      let current_seed = this.draft.value.draft_manager.draft_seed;\n      let draft_round = this.draft.value.draft_round;\n      let draft_direction = this.draft.value.direction;\n      let managers_with_pick_left_this_round = this.getRemainingDraftManagersInRound(draft_managers, draft_round, current_seed, draft_direction);\n      let roundPick = new RoundPicks();\n      roundPick.round = draft_round;\n      roundPick.draft_managers = managers_with_pick_left_this_round;\n      roundPicks.push(roundPick);\n\n      if (!(roundPicks.length >= draft_managers.length)) {\n        let remaining_picks = draft_managers.length - managers_with_pick_left_this_round.length;\n        draft_round++;\n        draft_direction = !draft_direction;\n        current_seed = draft_direction ? 12 : 1;\n        managers_with_pick_left_this_round = this.getRemainingDraftManagersInRound(draft_managers, draft_round, current_seed, draft_direction).slice(0, remaining_picks);\n        let roundPick = new RoundPicks();\n        roundPick.round = draft_round;\n        roundPick.draft_managers = managers_with_pick_left_this_round;\n        roundPicks.push(roundPick);\n      }\n\n      return roundPicks;\n    }\n\n    getRoundPickStatus() {\n      let draft_managers = this.draft.value.draft_managers;\n      draft_managers.forEach(dm => {\n        dm.draft_manager_picks = this.draft.value.draft_manager_picks.filter(dmp => dmp.draft_manager_id == dm.id).map(dmp => DraftFunctions.getBasicDraftManagerPickObject(dmp));\n      });\n      let draft_round = this.draft.value.draft_round;\n      let draft_direction = this.draft.value.direction;\n      draft_managers.forEach(dm => {\n        dm.has_picked_this_round = false;\n\n        if (dm.draft_manager_picks.some(dmp => dmp.pick_order == draft_round)) {\n          dm.has_picked_this_round = true;\n        }\n      });\n      return draft_managers.sort((a, b) => {\n        return draft_direction ? a.draft_seed < b.draft_seed ? 1 : -1 : a.draft_seed > b.draft_seed ? 1 : -1;\n      });\n    }\n\n    getRemainingDraftManagersInRound(draft_managers, draft_round, current_seed, draft_direction) {\n      let managers_with_pick_left_this_round = draft_direction ? draft_managers.filter(dm => dm.draft_seed <= current_seed && !dm.draft_manager_picks.some(dmp => dmp.pick_order == draft_round)) : draft_managers.filter(dm => dm.draft_seed >= current_seed && !dm.draft_manager_picks.some(dmp => dmp.pick_order == draft_round)); // now order it...\n\n      managers_with_pick_left_this_round.sort((a, b) => {\n        return draft_direction ? a.draft_seed < b.draft_seed ? 1 : -1 : a.draft_seed > b.draft_seed ? 1 : -1;\n      });\n      return managers_with_pick_left_this_round;\n    }\n\n    subscribeToEvents() {\n      this.signalRService.connectionEstablished.subscribe(() => {// we could send a message out.\n      });\n      this.signalRService.updateReceived.subscribe(draft => {\n        this.draft.next(draft);\n      });\n      this.signalRService.statusReceived.subscribe(status => {\n        if (this.draft.value.status_id != status) {\n          this.draft.value.status_id = status;\n          this.draft.next(this.draft.value);\n        }\n      });\n      this.signalRService.pickReceived.subscribe(pick => {\n        this.pick.next(pick);\n      });\n    }\n\n    updateDraftStatusNotification(draftStatus) {\n      this.signalRService.updateStatus(draftStatus);\n    }\n\n    updateDraftNotification(draft) {\n      this.signalRService.updateDraft(draft);\n    }\n\n    updatePickNotification(pick) {\n      this.signalRService.updatePick(pick);\n    }\n\n    draftIsAuction() {\n      return true;\n    }\n\n    getMaxBid(dmp) {\n      if (!dmp.sealed_bids.some(sb => sb.bid_eligible)) {\n        return undefined;\n      }\n\n      let maxBids = dmp.sealed_bids.filter(b => b.bid_eligible && b.bid_amount == this.getMaxBidAmount(dmp));\n      let maxBid;\n      if (this.draft.value.direction) maxBid = maxBids.reduce((p, c) => this.getManagerById(p.draft_manager_id).draft_seed > this.getManagerById(c.draft_manager_id).draft_seed ? p : c);else maxBid = maxBids.reduce((p, c) => this.getManagerById(p.draft_manager_id).draft_seed < this.getManagerById(c.draft_manager_id).draft_seed ? p : c);\n      maxBid.is_max_bid = true;\n      return maxBid;\n    }\n\n    getMaxBidAmount(dmp) {\n      var _a, _b, _c, _d, _e;\n\n      if (((_a = dmp.sealed_bids) === null || _a === void 0 ? void 0 : _a.length) > 1) return (_e = (_d = (_c = (_b = dmp.sealed_bids) === null || _b === void 0 ? void 0 : _b.filter(sb => sb.bid_eligible)) === null || _c === void 0 ? void 0 : _c.reduce((p, c) => p.bid_amount > c.bid_amount ? p : c)) === null || _d === void 0 ? void 0 : _d.bid_amount) !== null && _e !== void 0 ? _e : dmp.value_price;else return dmp.value_price;\n    }\n\n    getManagerById(id) {\n      return this.draft.value.draft_managers.find(dm => dm.id == id);\n    }\n\n    startDraftingTimer() {\n      this.startDraftTimer.emit(true);\n    }\n\n    stopDraftingTimer() {\n      this.stopDraftTimer.emit(true);\n    }\n\n    startBidsTimer() {\n      this.startSealedBidsTimer.emit(true);\n    }\n\n    stopBidsTimer() {\n      this.stopSealedBidsTimer.emit(true);\n    }\n\n  }\n\n  DraftControllerService.ɵfac = function DraftControllerService_Factory(t) {\n    return new (t || DraftControllerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FplService), i0.ɵɵinject(i3.DraftService), i0.ɵɵinject(i4.SignalRService));\n  };\n\n  DraftControllerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DraftControllerService,\n    factory: DraftControllerService.ɵfac,\n    providedIn: 'root'\n  });\n  return DraftControllerService;\n})();","map":null,"metadata":{},"sourceType":"module"}