{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { HubConnectionBuilder } from '@aspnet/signalr';\nimport { Draft, DraftManagerPick, DraftFunctions, DraftStatuses } from '../models/draft';\nimport * as i0 from \"@angular/core\";\nexport let SignalRService = /*#__PURE__*/(() => {\n  class SignalRService {\n    constructor() {\n      this.updateReceived = new EventEmitter();\n      this.statusReceived = new EventEmitter();\n      this.pickReceived = new EventEmitter();\n      this.connectionEstablished = new EventEmitter();\n      this.createConnection();\n      this.registerOnServerEvents();\n      this.startConnection();\n    }\n\n    updateDraft(draft) {\n      this._hubConnection.invoke('updateDraft', DraftFunctions.getBasicDraftObject(draft));\n    }\n\n    updateStatus(draftStatus) {\n      this._hubConnection.invoke('updateDraftStatus', draftStatus);\n    }\n\n    updatePick(pick) {\n      this._hubConnection.invoke('updatePick', pick);\n    }\n\n    createConnection() {\n      this._hubConnection = new HubConnectionBuilder().withUrl(window.location.origin + '/fplHub').build();\n    }\n\n    startConnection() {\n      this._hubConnection.start().then(() => {\n        //this.connectionEstablished = true;\n        console.log('Hub connection started');\n        this.connectionEstablished.emit(true);\n      }).catch(err => {\n        console.log('Error while establishing connection, retrying...');\n      });\n    }\n\n    registerOnServerEvents() {\n      this._hubConnection.on('UpdateDraft', data => {\n        this.updateReceived.emit(data);\n        console.log('Draft listener configured');\n      });\n\n      this._hubConnection.on('updateDraftStatus', data => {\n        this.statusReceived.emit(data);\n        console.log('Status listener configured');\n      });\n\n      this._hubConnection.on('UpdatePick', data => {\n        this.pickReceived.emit(data);\n        console.log('Pick listener configured');\n      });\n    }\n\n  }\n\n  SignalRService.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)();\n  };\n\n  SignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: 'root'\n  });\n  return SignalRService;\n})();","map":null,"metadata":{},"sourceType":"module"}